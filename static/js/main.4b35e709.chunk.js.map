{"version":3,"sources":["atoms/plate.ts","components/PlateCard.tsx","containers/PlateList.tsx","components/PlateFilter.tsx","components/PlatePagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialFavs","initialPlates","plateState","atom","key","default","liveSkillListState","Array","from","Set","map","p","LiveSkill","filter","f","json","localStorage","getItem","Map","JSON","parse","initialRalities","initialTypes","favsState","ralityJson","initialLiveSkill","typeJson","initialEffectiveDivas","liveSkill","effectiveDivaJson","plateFilterState","rality","type","effectiveDiva","filteredPlateState","selector","get","list","skipRality","values","every","v","skipType","skipLiveSkill","skipEffectiveDiva","count","length","results","InitialRarity","toString","filterRality","Attribute","filterType","filterLiveSkill","EffectiveDiva","some","filterEffectiveDiva","platePagingState","current","numberOf","pagedPlateState","filteredList","paging","pages","Math","ceil","slice","PlateCard","props","plate","useState","released","setReleased","useRecoilState","favs","setFavs","style","margin","padding","clear","boxShadow","transition","background","a","getPlateColor","width","float","Name","color","Id","onClick","id","fav","undefined","set","MaxRarity","delete","onFavChange","src","ReleasedImage","InitialImage","alt","listStyle","paddingLeft","marginLeft","MaxTotal","MaxVoice","MaxSoul","MaxCharm","CenterSkill","ActiveSkill","PlateList","plates","useRecoilValue","PlateFilter","setFilter","liveSkillList","typePattern","name","forEach","k","push","marginRight","checked","onChange","generateRalityFilter","generateTypeFilter","value","e","currentTarget","l","i","generateEffectiveDivaFilter","PlatePagination","filteredPlates","setPaging","jumpToPage","jumpPages","last","getJumpPages","b","disabled","parseInt","isNaN","min","max","PersistenceObserver","useRecoilTransactionObserver_UNSTABLE","snapshot","getLoadable","contents","favsJson","stringify","setItem","App","document","title","position","top","height","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b35e709.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport plateList from \"../resources/plateList.json\";\n\nexport interface Plate {\n  Id: number;\n  Url: string;\n  Name: string;\n  InitialRarity: number;\n  MaxRarity: number;\n  Attribute: string;\n  InitialImage: string;\n  ReleasedImage: string;\n  Episod: string;\n  CenterSkill: string;\n  CenterSkillCondition: string;\n  ActiveSkill: string;\n  ActiveSkillCondition: string;\n  LiveSkill: string;\n  LiveSkillCondition: string;\n  EffectiveDiva: string[];\n  InitialTotal: number;\n  MaxTotal: number;\n  InitialSoul: number;\n  MaxSoul: number;\n  InitialVoice: number;\n  MaxVoice: number;\n  InitialCharm: number;\n  MaxCharm: number;\n  InitialLife: number;\n  MaxLife: number;\n  InitialSuport: number;\n  MaxSuport: number;\n  InitialForldWave: number;\n  MaxForldWave: number;\n  MaxLuck: number;\n  ExpectedLife: number;\n  ExpectedScore: number;\n  ExpectedItem: number;\n  ExpectedForldWave: number;\n  ExpectedAttack: number;\n  Discription: string;\n  Error: [];\n}\n\nconst initialPlates: Plate[] = plateList;\n\nexport const plateState = atom({\n  key: \"plate\",\n  default: initialPlates,\n});\n\nexport const liveSkillListState = atom({\n  key: \"liveSkillList\",\n  default: Array.from(\n    new Set(initialPlates.map((p) => p.LiveSkill).filter((f) => f !== null))\n  ),\n});\n\nlet initialFavs: Map<number, boolean>;\nvar json = localStorage.getItem(\"favsPlate\");\nif (json !== null) {\n  initialFavs = new Map(JSON.parse(json));\n} else {\n  initialFavs = new Map<number, boolean>();\n}\n\nexport const favsState = atom({\n  key: \"favsPlate\",\n  default: initialFavs,\n});\n\nlet initialRalities: Map<string, boolean>;\nvar ralityJson = localStorage.getItem(\"plateRality\");\nif (ralityJson !== null) {\n  initialRalities = new Map(JSON.parse(ralityJson));\n} else {\n  initialRalities = new Map([\n    [\"1\", true],\n    [\"2\", true],\n    [\"3\", true],\n    [\"4\", true],\n    [\"5\", true],\n    [\"6\", true],\n  ]);\n}\n\nlet initialTypes: Map<string, boolean>;\nvar typeJson = localStorage.getItem(\"plateType\");\nif (typeJson !== null) {\n  initialTypes = new Map(JSON.parse(typeJson));\n} else {\n  initialTypes = new Map([\n    [\"star\", true],\n    [\"love\", true],\n    [\"life\", true],\n  ]);\n}\n\nlet initialLiveSkill: string;\nvar liveSkill = localStorage.getItem(\"liveSkill\");\ninitialLiveSkill = liveSkill !== null ? liveSkill : \"\";\n\nlet initialEffectiveDivas: Map<string, boolean>;\nvar effectiveDivaJson = localStorage.getItem(\"plateEffectiveDiva\");\nif (effectiveDivaJson !== null) {\n  initialEffectiveDivas = new Map(JSON.parse(effectiveDivaJson));\n} else {\n  initialEffectiveDivas = new Map([\n    [\"フレイア・ヴィオン\", true],\n    [\"美雲・ギンヌメール\", true],\n    [\"カナメ・バッカニア\", true],\n    [\"マキナ・中島\", true],\n    [\"レイナ・プラウラー\", true],\n    [\"ランカ・リー\", true],\n    [\"シェリル・ノーム\", true],\n    [\"ミレーヌ・ジーナス\", true],\n    [\"熱気バサラ\", true],\n    [\"リン・ミンメイ\", true],\n  ]);\n}\n\nexport interface PlateFilterSetting {\n  rality: Map<string, boolean>;\n  type: Map<string, boolean>;\n  liveSkill: string;\n  effectiveDiva: Map<string, boolean>;\n}\n\nexport const plateFilterState = atom({\n  key: \"plateFilterState\",\n  default: {\n    rality: initialRalities,\n    type: initialTypes,\n    liveSkill: initialLiveSkill,\n    effectiveDiva: initialEffectiveDivas,\n  } as PlateFilterSetting,\n});\n\nexport interface FilteredPlate {\n  count: number;\n  list: Plate[];\n}\n\nexport const filteredPlateState = selector({\n  key: \"filteredPlateState\",\n  get: ({ get }) => {\n    const list = get(plateState);\n    const filter = get(plateFilterState);\n\n    const filterRality = (p: Plate) =>\n      filter.rality.get(p.InitialRarity.toString());\n    const filterType = (p: Plate) => filter.type.get(p.Attribute);\n    const filterLiveSkill = (p: Plate) => filter.liveSkill === p.LiveSkill;\n    const filterEffectiveDiva = (p: Plate) => {\n      if (p.EffectiveDiva === null) return true;\n      return p.EffectiveDiva.some((v) => filter.effectiveDiva.get(v));\n    };\n    const skipRality = Array.from(filter.rality.values()).every((v) => v);\n    const skipType = Array.from(filter.type.values()).every((v) => v);\n    const skipLiveSkill = filter.liveSkill === \"\";\n    const skipEffectiveDiva = Array.from(filter.effectiveDiva.values()).every(\n      (v) => v\n    );\n\n    if (skipRality && skipType && skipLiveSkill && skipEffectiveDiva) {\n      return { count: list.length, list: list } as FilteredPlate;\n    }\n    var results = list.filter(\n      (p) =>\n        (skipRality || filterRality(p)) &&\n        (skipType || filterType(p)) &&\n        (skipLiveSkill || filterLiveSkill(p)) &&\n        (skipEffectiveDiva || filterEffectiveDiva(p))\n    );\n    return {\n      count: results.length,\n      list: results,\n    } as FilteredPlate;\n    // TODO : お気に入りを使ってフィルタリングするかどうかを指定するフィルタリング項目を画面とfavsStateに追加する（でもlocalstorageに保存するのは配列のみにしたい）\n    //var usedFavs = usedType.filter((item) => favs.find((f) => f === item.Id));\n  },\n});\n\nexport const platePagingState = atom({\n  key: \"paging\",\n  default: {\n    current: 1,\n    numberOf: 10,\n  },\n});\n\nexport const pagedPlateState = selector({\n  key: \"pagedPlateState\",\n  get: ({ get }) => {\n    const filteredList = get(filteredPlateState);\n    const paging = get(platePagingState);\n    const count = filteredList.count;\n    if (count <= paging.numberOf) return filteredList.list;\n    const pages = Math.ceil(count / paging.numberOf);\n    const current = paging.current > pages ? pages : paging.current;\n    return filteredList.list.slice(\n      paging.numberOf * (current - 1),\n      paging.numberOf * current\n    );\n  },\n});\n","import React, { useState } from \"react\";\nimport { Plate, favsState } from \"../atoms/plate\";\nimport { useRecoilState } from \"recoil\";\n\nexport type PlateCardProps = {\n  plate: Plate;\n  children?: React.ReactNode;\n};\n\nexport const PlateCard = (props: PlateCardProps) => {\n  var plate = props.plate;\n  const [released, setReleased] = useState(false);\n  const [favs, setFavs] = useRecoilState(favsState);\n  const onChangeRality = () => {\n    if (plate.InitialRarity === plate.MaxRarity) return;\n    setReleased(!released);\n  };\n\n  const getPlateColor = (a: string) => {\n    switch (a) {\n      case \"star\":\n        return \"#FFFF99\";\n      case \"love\":\n        return \"#FFCCFF\";\n      case \"life\":\n        return \"#99FFFF\";\n      default:\n        return \"white\";\n    }\n  };\n\n  const onOpenDetail = (plate: Plate) => {};\n  const onFavChange = (id: number) => {\n    let fav = favs.get(id);\n    if (fav === undefined) {\n      setFavs((f) => {\n        return f.set(id, false);\n      });\n    } else if (!fav && plate.InitialRarity !== plate.MaxRarity) {\n      setFavs((f) => {\n        return f.set(id, true);\n      });\n    } else {\n      setFavs((f) => {\n        f.delete(id);\n        return f;\n      });\n    }\n  };\n\n  return (\n    <div\n      style={{\n        margin: 2,\n        padding: 5,\n        clear: \"left\",\n        boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\n        transition: \"0.3s\",\n        background: getPlateColor(plate.Attribute),\n      }}\n    >\n      <div style={{ clear: \"left\" }}>\n        <h4 style={{ width: \"95%\", margin: 0, float: \"left\" }}>{plate.Name}</h4>\n        <span\n          style={{\n            float: \"left\",\n            color: favs.get(plate.Id) ? \"purple\" : \"black\",\n          }}\n          onClick={() => onFavChange(plate.Id)}\n        >\n          {favs.get(plate.Id) !== undefined ? \"★\" : \"☆\"}\n        </span>\n      </div>\n      <img\n        src={released ? plate.ReleasedImage : plate.InitialImage}\n        alt={plate.Name}\n        style={{ width: \"65%\", float: \"left\" }}\n        onClick={onChangeRality}\n      />\n      <div style={{ float: \"left\", width: \"35%\" }}>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            marginLeft: 5,\n          }}\n        >\n          <li>Total:{plate.MaxTotal}</li>\n          <li>Voice:{plate.MaxVoice}</li>\n          <li>Soul: {plate.MaxSoul}</li>\n          <li>Charm:{plate.MaxCharm}</li>\n        </ul>\n      </div>\n      <div style={{ clear: \"left\" }}>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>Center:{plate.CenterSkill}</li>\n          <li>Active:{plate.ActiveSkill}</li>\n          <li>Live :{plate.LiveSkill}</li>\n        </ul>\n        <div style={{ clear: \"left\" }}>\n          <button onClick={() => onOpenDetail(plate)} style={{ width: \"100%\" }}>\n            Detail\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { pagedPlateState } from \"../atoms/plate\";\nimport { PlateCard } from \"../components/PlateCard\";\n\ntype PlateListProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateList = (props: PlateListProps) => {\n  const plates = useRecoilValue(pagedPlateState);\n\n  return (\n    <ul style={{ margin: 5, padding: 0 }}>\n      {plates.map((p) => (\n        <li key={p.Id} style={{ listStyle: \"none\", float: \"left\", margin: 2 }}>\n          <PlateCard plate={p} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { plateFilterState } from \"../atoms/plate\";\nimport { liveSkillListState } from \"../atoms/plate\";\n\ntype PlateFilterProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateFilter = (props: PlateFilterProps) => {\n  const [filter, setFilter] = useRecoilState(plateFilterState);\n  // const [effectiveDivaFilter, setEffectiveDivaFilter] = useRecoilState(\n  //   plateEffectiveDivaState\n  // );\n  const liveSkillList = useRecoilValue(liveSkillListState);\n\n  const generateRalityFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.rality.forEach((v, k) => {\n      results.push(\n        <label key={\"useRality\" + k} style={{ marginRight: 5 }}>\n          <input\n            type=\"checkbox\"\n            checked={v}\n            onChange={() =>\n              setFilter((f) => {\n                return { ...f, rality: f.rality.set(k, !v) };\n              })\n            }\n          />\n          {k}\n        </label>\n      );\n    });\n    return results;\n  };\n\n  const typePattern = new Map([\n    [\"star\", { name: \"星\", color: \"#AAAA44\" }],\n    [\"love\", { name: \"愛\", color: \"#AA77AA\" }],\n    [\"life\", { name: \"命\", color: \"#44AAAA\" }],\n  ]);\n\n  const generateTypeFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.type.forEach((v, k) => {\n      results.push(\n        <label\n          key={\"useType\" + k}\n          style={{ marginRight: 5, color: typePattern.get(k)?.color }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={v}\n            onChange={() =>\n              setFilter((f) => {\n                return { ...f, type: f.type.set(k, !v) };\n              })\n            }\n          />\n          {typePattern.get(k)?.name}\n        </label>\n      );\n    });\n    return results;\n  };\n\n  const generateEffectiveDivaFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.effectiveDiva.forEach((v, k) => {\n      results.push(\n        <label\n          key={\"useEffectiveDiva\" + k}\n          style={{ float: \"left\", marginRight: 5 }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={v}\n            onChange={() =>\n              setFilter((f) => {\n                return { ...f, effectiveDiva: f.effectiveDiva.set(k, !v) };\n              })\n            }\n          />\n          {k}\n        </label>\n      );\n    });\n    return results;\n  };\n  return (\n    <div\n      style={{\n        margin: 5,\n      }}\n    >\n      <div>\n        レアリティ:\n        {generateRalityFilter()}\n      </div>\n      <hr />\n      <div>\n        属性:\n        {generateTypeFilter()}\n      </div>\n      <hr />\n      <div>\n        ライブスキル:\n        <select\n          value={filter.liveSkill}\n          onChange={(e) =>\n            setFilter((f) => {\n              return { ...f, liveSkill: e.currentTarget.value };\n            })\n          }\n        >\n          <option value={\"\"}></option>\n          {liveSkillList.map((l, i) => (\n            <option key={\"skill\" + i} value={l}>\n              {l}\n            </option>\n          ))}\n        </select>\n        <div style={{ marginLeft: 5 }}>\n          <div style={{ float: \"left\" }}>対応歌姫:</div>\n          {generateEffectiveDivaFilter()}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { platePagingState, filteredPlateState } from \"../atoms/plate\";\n\ntype PlatePaginationProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlatePagination = (props: PlatePaginationProps) => {\n  const filteredPlates = useRecoilValue(filteredPlateState);\n  const [paging, setPaging] = useRecoilState(platePagingState);\n\n  const count = filteredPlates.count;\n  const pages = count === 0 ? 1 : Math.ceil(count / paging.numberOf);\n  const current = paging.current > pages ? pages : paging.current;\n\n  if (current !== paging.current) {\n    setPaging((p) => {\n      return { ...p, current: current };\n    });\n  }\n\n  const onChangeCurrentPage = (e: React.FormEvent<HTMLInputElement>) => {\n    setPaging((p) => {\n      const value = parseInt(e.currentTarget.value);\n      return { ...p, current: isNaN(value) ? 1 : value };\n    });\n  };\n\n  const jumpToPage = (i: number) => {\n    setPaging((p) => {\n      return { ...p, current: i };\n    });\n  };\n\n  const getJumpPages = () => {\n    switch (pages) {\n      case 0:\n        return [];\n      case 1:\n        return [1];\n      case 2:\n        return [1, 2];\n      case 3:\n        return [1, 2, 3];\n      case 4:\n        return [1, 2, 3, 4];\n      case 5:\n        return [1, 2, 3, 4, 5];\n      case 6:\n        return [1, 2, 3, 4, 5, 6];\n      default:\n        var last = [-2, -1, 0].map((i) => pages + i);\n        return [1, 2, 3, ...last];\n    }\n  };\n  const jumpPages = getJumpPages();\n\n  return (\n    <div\n      style={{\n        margin: 5,\n        clear: \"left\",\n      }}\n    >\n      <hr />\n      表示:\n      {jumpPages.slice(0, 3).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n      ...\n      <button\n        onClick={() => jumpToPage(paging.current - 1)}\n        disabled={paging.current === 1}\n      >\n        ◀\n      </button>\n      <input\n        type=\"number\"\n        value={paging.current}\n        onChange={onChangeCurrentPage}\n        min={1}\n        max={pages}\n        style={{\n          width: \"2em\",\n        }}\n      />\n      <button\n        onClick={() => jumpToPage(paging.current + 1)}\n        disabled={paging.current === pages}\n      >\n        ▶\n      </button>\n      ...\n      {jumpPages.slice(3, 6).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport { PlateList } from \"./containers/PlateList\";\nimport { PlateFilter } from \"./components/PlateFilter\";\nimport { PlatePagination } from \"./components/PlatePagination\";\nimport { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\nimport { favsState, plateFilterState, PlateFilterSetting } from \"./atoms/plate\";\n\nfunction PersistenceObserver() {\n  useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n    // TODO : どのatomが更新されたかわからないので、毎回全部保存してるのでどうにかしたい\n\n    var favs = snapshot.getLoadable(favsState).contents;\n    var favsJson = JSON.stringify(Array.from(favs as Map<number, boolean>));\n    if (localStorage.getItem(favsState.key) !== favsJson) {\n      localStorage.setItem(favsState.key, favsJson);\n    }\n\n    var filter = snapshot.getLoadable(plateFilterState)\n      .contents as PlateFilterSetting;\n\n    var rality = Array.from(filter.rality as Map<string, boolean>);\n    var ralityJson = JSON.stringify(rality);\n    if (localStorage.getItem(\"plateRality\") !== ralityJson) {\n      localStorage.setItem(\"plateRality\", ralityJson);\n    }\n\n    var type = Array.from(filter.type as Map<string, boolean>);\n    var typeJson = JSON.stringify(type);\n    if (localStorage.getItem(\"plateType\") !== typeJson) {\n      localStorage.setItem(\"plateType\", typeJson);\n    }\n\n    var effectiveDiva = Array.from(\n      filter.effectiveDiva as Map<string, boolean>\n    );\n    var effectiveDivaJson = JSON.stringify(effectiveDiva);\n    if (localStorage.getItem(\"plateEffectiveDiva\") !== effectiveDivaJson) {\n      localStorage.setItem(\"plateEffectiveDiva\", effectiveDivaJson);\n    }\n\n    var liveSkill = filter.liveSkill;\n    if (localStorage.getItem(\"liveSkill\") !== liveSkill) {\n      localStorage.setItem(\"liveSkill\", liveSkill);\n    }\n  });\n  return null;\n}\n\nfunction App() {\n  document.title = \"歌マクロスDB\";\n  return (\n    <RecoilRoot>\n      <PersistenceObserver />\n      <h3\n        style={{\n          position: \"fixed\",\n          top: 0,\n          height: 26,\n          margin: 0,\n          paddingLeft: 5,\n          width: \"100%\",\n          background: \"#3399FF\",\n          color: \"white\",\n        }}\n      >\n        歌マクロスDB\n      </h3>\n      <div\n        style={{\n          marginTop: 26,\n          width: \"100%\",\n          background: \"white\",\n        }}\n      >\n        <PlateFilter />\n        <PlatePagination />\n        <PlateList />\n        <PlatePagination />\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}