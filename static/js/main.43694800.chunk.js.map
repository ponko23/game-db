{"version":3,"sources":["atoms/plate.ts","components/PlateCard.tsx","containers/PlateList.tsx","components/PlateFilter.tsx","components/PlatePagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialPlates","plateState","atom","key","default","plateFilterState","useRality","rality","use","useType","type","hasExpected","name","has","filteredPlateState","selector","get","filter","item","find","f","InitialRarity","Attribute","platePagingState","current","pages","numberOf","pagedPlateState","filteredList","paging","count","length","Math","ceil","slice","PlateCard","props","plate","useState","released","SetReleased","style","margin","padding","clear","boxShadow","transition","background","a","getPlateColor","Name","src","ReleasedImage","InitialImage","alt","width","float","onClick","MaxRarity","listStyle","paddingLeft","marginLeft","textAlign","MaxTotal","MaxVoice","MaxSoul","MaxCharm","CenterSkill","ActiveSkill","LiveSkill","PlateList","plates","useRecoilValue","marginTop","map","p","Id","PlateFilter","useRecoilState","setFilter","r","i","checked","onChange","newValue","onChangeUseRality","t","onChangeUseType","PlatePagination","filteredPlates","setPaging","jumpToPage","jumpPages","last","getJumpPages","b","e","disabled","value","parseInt","currentTarget","isNaN","min","max","App","position","top","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43694800.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport plateList from \"../resources/plateList.json\";\n\nexport interface Plate {\n  Id: number;\n  Url: string;\n  Name: string;\n  InitialRarity: number;\n  MaxRarity: number;\n  Attribute: string;\n  InitialImage: string;\n  ReleasedImage: string;\n  Episod: string;\n  CenterSkill: string;\n  CenterSkillCondition: string;\n  ActiveSkill: string;\n  ActiveSkillCondition: string;\n  LiveSkill: string;\n  LiveSkillCondition: string;\n  EffectiveDiva: string[];\n  InitialTotal: number;\n  MaxTotal: number;\n  InitialSoul: number;\n  MaxSoul: number;\n  InitialVoice: number;\n  MaxVoice: number;\n  InitialCharm: number;\n  MaxCharm: number;\n  InitialLife: number;\n  MaxLife: number;\n  InitialSuport: number;\n  MaxSuport: number;\n  InitialForldWave: number;\n  MaxForldWave: number;\n  MaxLuck: number;\n  ExpectedLife: number;\n  ExpectedScore: number;\n  ExpectedItem: number;\n  ExpectedForldWave: number;\n  ExpectedAttack: number;\n  Discription: string;\n  Error: [];\n}\n\nconst initialPlates: Plate[] = plateList;\n\nexport const plateState = atom({\n  key: \"plate\",\n  default: initialPlates,\n});\n\nexport type RalityType = {\n  rality: number;\n  use: boolean;\n};\n\nexport type PlateType = {\n  type: string;\n  use: boolean;\n};\n\nexport type ExpectedValue = {\n  name: string;\n  has: boolean | null; // has expected value? yes:true / no:false / both:null\n};\n\nexport interface PlateFilter {\n  useRality: RalityType[];\n  useType: PlateType[];\n  hasExpected: ExpectedValue[];\n}\n\nconst initialPlateFilter: PlateFilter = {\n  useRality: [\n    { rality: 6, use: true },\n    { rality: 5, use: true },\n    { rality: 4, use: true },\n    { rality: 3, use: true },\n    { rality: 2, use: true },\n    { rality: 1, use: true },\n  ],\n  useType: [\n    { type: \"star\", use: true },\n    { type: \"love\", use: true },\n    { type: \"life\", use: true },\n  ],\n  hasExpected: [\n    { name: \"Life\", has: null },\n    { name: \"Score\", has: null },\n    { name: \"Item\", has: null },\n    { name: \"ForldWave\", has: null },\n    { name: \"Attack\", has: null },\n  ],\n};\n\nexport const plateFilterState = atom({\n  key: \"filter\",\n  default: initialPlateFilter,\n});\n\nexport const filteredPlateState = selector({\n  key: \"filteredPlateState\",\n  get: ({ get }) => {\n    const filter = get(plateFilterState);\n    const list = get(plateState);\n    return list\n      .filter(\n        (item) =>\n          filter.useRality.find((f) => f.rality === item.InitialRarity)?.use\n      )\n      .filter(\n        (item) => filter.useType.find((f) => f.type === item.Attribute)?.use\n      );\n  },\n});\n\nexport interface PlatePaging {\n  current: number;\n  pages: number;\n  numberOf: number;\n}\n\nconst initialPlatePaging = {\n  current: 1,\n  pages: 1,\n  numberOf: 10,\n};\n\nexport const platePagingState = atom({\n  key: \"paging\",\n  default: initialPlatePaging,\n});\n\nexport const pagedPlateState = selector({\n  key: \"pagedPlateState\",\n  get: ({ get }) => {\n    const filteredList = get(filteredPlateState);\n    const paging = get(platePagingState);\n    const count = filteredList.length;\n    if (count <= paging.numberOf) return filteredList;\n    const pages = Math.ceil(count / paging.numberOf);\n    const current = paging.current > pages ? paging.pages : paging.current;\n    return filteredList.slice(\n      paging.numberOf * (current - 1),\n      paging.numberOf * current\n    );\n  },\n});\n","import React, { useState } from \"react\";\nimport { Plate } from \"../atoms/plate\";\n\nexport type PlateCardProps = {\n  plate: Plate;\n  children?: React.ReactNode;\n};\n\nexport const PlateCard = (props: PlateCardProps) => {\n  var plate = props.plate;\n  const [released, SetReleased] = useState(false);\n\n  const onChangeRality = () => {\n    if (plate.InitialRarity === plate.MaxRarity) return;\n    SetReleased(!released);\n  };\n\n  const getPlateColor = (a: string) => {\n    switch (a) {\n      case \"star\":\n        return \"#FFFF99\";\n      case \"love\":\n        return \"#FFCCFF\";\n      case \"life\":\n        return \"#99FFFF\";\n      default:\n        return \"white\";\n    }\n  };\n\n  const onOpenDetail = (plate: Plate) => {};\n\n  return (\n    <div\n      style={{\n        margin: 2,\n        padding: 5,\n        clear: \"left\",\n        boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\n        transition: \"0.3s\",\n        background: getPlateColor(plate.Attribute),\n      }}\n    >\n      <h4 style={{ margin: 0 }}>{plate.Name}</h4>\n      <img\n        src={released ? plate.ReleasedImage : plate.InitialImage}\n        alt={plate.Name}\n        style={{ width: \"60%\", float: \"left\" }}\n        onClick={onChangeRality}\n      />\n      <div style={{ float: \"left\", width: \"40%\" }}>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            marginLeft: 5,\n          }}\n        >\n          <li>Total:</li>\n          <li>Voice:</li>\n          <li>Soul:</li>\n          <li>Charm:</li>\n        </ul>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            textAlign: \"right\",\n          }}\n        >\n          <li>{plate.MaxTotal}</li>\n          <li>{plate.MaxVoice}</li>\n          <li>{plate.MaxSoul}</li>\n          <li>{plate.MaxCharm}</li>\n        </ul>\n      </div>\n      <div style={{ clear: \"left\" }}>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>Center:</li>\n          <li>Active:</li>\n          <li>Live:</li>\n        </ul>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>{plate.CenterSkill}</li>\n          <li>{plate.ActiveSkill}</li>\n          <li>{plate.LiveSkill}</li>\n        </ul>\n        <div style={{ clear: \"left\" }}>\n          <button onClick={() => onOpenDetail(plate)} style={{ width: \"100%\" }}>\n            Detail\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { pagedPlateState } from \"../atoms/plate\";\nimport { PlateCard } from \"../components/PlateCard\";\n\ntype PlateListProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateList = (props: PlateListProps) => {\n  const plates = useRecoilValue(pagedPlateState);\n\n  return (\n    <ul style={{ marginTop: 94, padding: 0 }}>\n      {plates.map((p) => (\n        <li key={p.Id} style={{ listStyle: \"none\", float: \"left\", margin: 2 }}>\n          <PlateCard plate={p} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { plateFilterState } from \"../atoms/plate\";\n\ntype PlateFilterProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateFilter = (props: PlateFilterProps) => {\n  const [filter, setFilter] = useRecoilState(plateFilterState);\n\n  const onChangeUseRality = (i: number) => {\n    setFilter((f) => {\n      var newValue = !f.useRality[i].use;\n      return {\n        ...f,\n        useRality: [\n          ...f.useRality.slice(0, i),\n          { ...f.useRality[i], use: newValue },\n          ...f.useRality.slice(i + 1),\n        ],\n      };\n    });\n  };\n\n  const onChangeUseType = (i: number) => {\n    setFilter((f) => {\n      var newValue = !f.useType[i].use;\n      return {\n        ...f,\n        useType: [\n          ...f.useType.slice(0, i),\n          { ...f.useType[i], use: newValue },\n          ...f.useType.slice(i + 1),\n        ],\n      };\n    });\n  };\n\n  return (\n    <div\n      style={{\n        margin: 2,\n      }}\n    >\n      <div>\n        レアリティ:\n        {filter.useRality.map((r, i) => (\n          <label key={\"useRality\" + i}>\n            <input\n              type=\"checkbox\"\n              checked={r.use}\n              onChange={() => onChangeUseRality(i)}\n            />\n            {r.rality}\n          </label>\n        ))}\n      </div>\n      <div>\n        属性:\n        {filter.useType.map((t, i) => (\n          <label key={\"useType\" + i}>\n            <input\n              type=\"checkbox\"\n              checked={t.use}\n              onChange={() => onChangeUseType(i)}\n            />\n            {t.type}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { platePagingState, filteredPlateState } from \"../atoms/plate\";\n\ntype PlatePaginationProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlatePagination = (props: PlatePaginationProps) => {\n  const filteredPlates = useRecoilValue(filteredPlateState);\n  const [paging, setPaging] = useRecoilState(platePagingState);\n\n  const count = filteredPlates.length;\n  const pages = count === 0 ? 1 : Math.ceil(count / paging.numberOf);\n  const current = paging.current > pages ? pages : paging.current;\n\n  if (pages !== paging.pages || current !== paging.current) {\n    setPaging((p) => {\n      return { ...p, current: current, pages: pages };\n    });\n  }\n\n  const onChangeCurrentPage = (e: React.FormEvent<HTMLInputElement>) => {\n    setPaging((p) => {\n      const value = parseInt(e.currentTarget.value);\n      return { ...p, current: isNaN(value) ? 1 : value };\n    });\n  };\n\n  const jumpToPage = (i: number) => {\n    setPaging((p) => {\n      return { ...p, current: i };\n    });\n  };\n\n  const getJumpPages = () => {\n    switch (paging.pages) {\n      case 0:\n        return [];\n      case 1:\n        return [1];\n      case 2:\n        return [1, 2];\n      case 3:\n        return [1, 2, 3];\n      case 4:\n        return [1, 2, 3, 4];\n      case 5:\n        return [1, 2, 3, 4, 5];\n      case 6:\n        return [1, 2, 3, 4, 5, 6];\n      default:\n        var last = [-2, -1, 0].map((i) => paging.pages + i);\n        return [1, 2, 3, ...last];\n    }\n  };\n  const jumpPages = getJumpPages();\n\n  return (\n    <div\n      style={{\n        margin: 2,\n      }}\n    >\n      表示:\n      {jumpPages.slice(0, 3).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n      ...\n      <button\n        onClick={() => jumpToPage(paging.current - 1)}\n        disabled={paging.current === 1}\n      >\n        ◀\n      </button>\n      <input\n        type=\"number\"\n        value={paging.current}\n        onChange={onChangeCurrentPage}\n        min={1}\n        max={pages}\n        style={{\n          width: \"2em\",\n        }}\n      />\n      <button\n        onClick={() => jumpToPage(paging.current + 1)}\n        disabled={paging.current === paging.pages}\n      >\n        ▶\n      </button>\n      ...\n      {jumpPages.slice(3, 6).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport { PlateList } from \"./containers/PlateList\";\nimport { PlateFilter } from \"./components/PlateFilter\";\nimport { PlatePagination } from \"./components/PlatePagination\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <div\n        style={{\n          position: \"fixed\",\n          top: 0,\n          height: 80,\n          width: \"100%\",\n          padding: 5,\n          boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\n          transition: \"0.3s\",\n          background: \"white\",\n        }}\n      >\n        <PlateFilter />\n        <PlatePagination />\n      </div>\n      <PlateList />\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}