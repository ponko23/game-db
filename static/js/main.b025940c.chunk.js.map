{"version":3,"sources":["atoms/plate.ts","components/PlateCard.tsx","containers/PlateList.tsx","components/PlateFilter.tsx","components/PlatePagination.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["initialFavs","initialPlates","plateState","atom","key","default","liveSkillListState","Array","from","Set","map","p","LiveSkill","filter","f","json","localStorage","getItem","Map","JSON","parse","initialRalities","favsState","defaultRalities","ralityJson","initialTypes","initialLiveSkill","defaultTypes","typeJson","liveSkill","initialEffectiveDivas","defaultEffectiveDivas","effectiveDivaJson","plateFilterState","rality","type","effectiveDiva","filteredPlateState","selector","get","list","skipRality","values","every","v","skipType","skipLiveSkill","skipEffectiveDiva","count","length","results","InitialRarity","toString","filterRality","Attribute","filterType","filterLiveSkill","EffectiveDiva","some","filterEffectiveDiva","platePagingState","current","numberOf","pagedPlateState","filteredList","paging","pages","Math","ceil","slice","PlateCard","props","plate","useState","released","setReleased","useRecoilState","favs","setFavs","Paper","style","margin","padding","background","a","getPlateColor","clear","width","float","Name","color","Id","onClick","id","fav","undefined","set","MaxRarity","delete","onFavChange","src","ReleasedImage","InitialImage","alt","listStyle","paddingLeft","marginLeft","MaxTotal","MaxVoice","MaxSoul","MaxCharm","CenterSkill","ActiveSkill","useStyles","makeStyles","theme","createStyles","root","flexGrow","item","minWidth","PlateList","classes","plates","useRecoilValue","Grid","container","className","spacing","divaIcons","typeIcons","PlateFilter","setFilter","liveSkillList","Typography","variant","ToggleButton","paddingRight","paddingTop","paddingBottom","value","onChange","forEach","k","push","selected","generateRalityFilter","title","generateTypeFilter","e","currentTarget","l","i","generateEffectiveDivaFilter","marginTop","PlatePagination","filteredPlates","setPaging","Pagination","size","page","shape","event","PersistenceObserver","useRecoilTransactionObserver_UNSTABLE","snapshot","getLoadable","contents","favsJson","stringify","setItem","App","document","Container","maxWidth","marginBottom","Divider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","palette","primary","main","secondary","red","A400","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b025940c.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport plateList from \"../resources/plateList.json\";\n\nexport interface Plate {\n  Id: number;\n  Url: string;\n  Name: string;\n  InitialRarity: number;\n  MaxRarity: number;\n  Attribute: string;\n  InitialImage: string;\n  ReleasedImage: string;\n  Episod: string;\n  CenterSkill: string;\n  CenterSkillCondition: string;\n  ActiveSkill: string;\n  ActiveSkillCondition: string;\n  LiveSkill: string;\n  LiveSkillCondition: string;\n  EffectiveDiva: string[];\n  InitialTotal: number;\n  MaxTotal: number;\n  InitialSoul: number;\n  MaxSoul: number;\n  InitialVoice: number;\n  MaxVoice: number;\n  InitialCharm: number;\n  MaxCharm: number;\n  InitialLife: number;\n  MaxLife: number;\n  InitialSuport: number;\n  MaxSuport: number;\n  InitialForldWave: number;\n  MaxForldWave: number;\n  MaxLuck: number;\n  ExpectedLife: number;\n  ExpectedScore: number;\n  ExpectedItem: number;\n  ExpectedForldWave: number;\n  ExpectedAttack: number;\n  Discription: string;\n  Error: [];\n}\n\nconst initialPlates: Plate[] = plateList;\n\nexport const plateState = atom({\n  key: \"plate\",\n  default: initialPlates,\n});\n\nexport const liveSkillListState = atom({\n  key: \"liveSkillList\",\n  default: Array.from(\n    new Set(initialPlates.map((p) => p.LiveSkill).filter((f) => f !== null))\n  ),\n});\n\nlet initialFavs: Map<number, boolean>;\nvar json = localStorage.getItem(\"favsPlate\");\nif (json !== null) {\n  initialFavs = new Map(JSON.parse(json));\n} else {\n  initialFavs = new Map<number, boolean>();\n}\n\nexport const favsState = atom({\n  key: \"favsPlate\",\n  default: initialFavs,\n});\n\nexport const defaultRalities = new Map([\n  [\"1\", true],\n  [\"2\", true],\n  [\"3\", true],\n  [\"4\", true],\n  [\"5\", true],\n  [\"6\", true],\n]);\nlet initialRalities: Map<string, boolean>;\nvar ralityJson = localStorage.getItem(\"plateRality\");\nif (ralityJson !== null) {\n  initialRalities = new Map(JSON.parse(ralityJson));\n} else {\n  initialRalities = new Map(defaultRalities);\n}\n\nexport const defaultTypes = new Map([\n  [\"star\", true],\n  [\"love\", true],\n  [\"life\", true],\n]);\nlet initialTypes: Map<string, boolean>;\nvar typeJson = localStorage.getItem(\"plateType\");\nif (typeJson !== null) {\n  initialTypes = new Map(JSON.parse(typeJson));\n} else {\n  initialTypes = new Map(defaultTypes);\n}\n\nlet initialLiveSkill: string;\nvar liveSkill = localStorage.getItem(\"liveSkill\");\ninitialLiveSkill = liveSkill !== null ? liveSkill : \"\";\n\nexport const defaultEffectiveDivas = new Map([\n  [\"フレイア・ヴィオン\", true],\n  [\"美雲・ギンヌメール\", true],\n  [\"カナメ・バッカニア\", true],\n  [\"マキナ・中島\", true],\n  [\"レイナ・プラウラー\", true],\n  [\"ランカ・リー\", true],\n  [\"シェリル・ノーム\", true],\n  [\"ミレーヌ・ジーナス\", true],\n  [\"熱気バサラ\", true],\n  [\"リン・ミンメイ\", true],\n]);\nlet initialEffectiveDivas: Map<string, boolean>;\nvar effectiveDivaJson = localStorage.getItem(\"plateEffectiveDiva\");\nif (effectiveDivaJson !== null) {\n  initialEffectiveDivas = new Map(JSON.parse(effectiveDivaJson));\n} else {\n  initialEffectiveDivas = new Map(defaultEffectiveDivas);\n}\n\nexport interface PlateFilterSetting {\n  rality: Map<string, boolean>;\n  type: Map<string, boolean>;\n  liveSkill: string;\n  effectiveDiva: Map<string, boolean>;\n}\n\nexport const plateFilterState = atom({\n  key: \"plateFilterState\",\n  default: {\n    rality: initialRalities,\n    type: initialTypes,\n    liveSkill: initialLiveSkill,\n    effectiveDiva: initialEffectiveDivas,\n  } as PlateFilterSetting,\n});\n\nexport interface FilteredPlate {\n  count: number;\n  list: Plate[];\n}\n\nexport const filteredPlateState = selector({\n  key: \"filteredPlateState\",\n  get: ({ get }) => {\n    const list = get(plateState);\n    const filter = get(plateFilterState);\n\n    const filterRality = (p: Plate) =>\n      filter.rality.get(p.InitialRarity.toString());\n    const filterType = (p: Plate) => filter.type.get(p.Attribute);\n    const filterLiveSkill = (p: Plate) => filter.liveSkill === p.LiveSkill;\n    const filterEffectiveDiva = (p: Plate) => {\n      if (p.EffectiveDiva === null) return true;\n      return p.EffectiveDiva.some((v) => filter.effectiveDiva.get(v));\n    };\n    const skipRality = Array.from(filter.rality.values()).every((v) => v);\n    const skipType = Array.from(filter.type.values()).every((v) => v);\n    const skipLiveSkill = filter.liveSkill === \"\";\n    const skipEffectiveDiva = Array.from(filter.effectiveDiva.values()).every(\n      (v) => v\n    );\n\n    if (skipRality && skipType && skipLiveSkill && skipEffectiveDiva) {\n      return { count: list.length, list: list } as FilteredPlate;\n    }\n    var results = list.filter(\n      (p) =>\n        (skipRality || filterRality(p)) &&\n        (skipType || filterType(p)) &&\n        (skipLiveSkill || filterLiveSkill(p)) &&\n        (skipEffectiveDiva || filterEffectiveDiva(p))\n    );\n    return {\n      count: results.length,\n      list: results,\n    } as FilteredPlate;\n    // TODO : お気に入りを使ってフィルタリングするかどうかを指定するフィルタリング項目を画面とfavsStateに追加する（でもlocalstorageに保存するのは配列のみにしたい）\n    //var usedFavs = usedType.filter((item) => favs.find((f) => f === item.Id));\n  },\n});\n\nexport const platePagingState = atom({\n  key: \"paging\",\n  default: {\n    current: 1,\n    numberOf: 10,\n  },\n});\n\nexport const pagedPlateState = selector({\n  key: \"pagedPlateState\",\n  get: ({ get }) => {\n    const filteredList = get(filteredPlateState);\n    const paging = get(platePagingState);\n    const count = filteredList.count;\n    if (count <= paging.numberOf) return filteredList.list;\n    const pages = Math.ceil(count / paging.numberOf);\n    const current = paging.current > pages ? pages : paging.current;\n    return filteredList.list.slice(\n      paging.numberOf * (current - 1),\n      paging.numberOf * current\n    );\n  },\n});\n","import React, { useState } from \"react\";\nimport { Plate, favsState } from \"../atoms/plate\";\nimport { useRecoilState } from \"recoil\";\nimport { Paper } from \"@material-ui/core\";\n\nexport type PlateCardProps = {\n  plate: Plate;\n  children?: React.ReactNode;\n};\n\nexport const PlateCard = (props: PlateCardProps) => {\n  var plate = props.plate;\n  const [released, setReleased] = useState(false);\n  const [favs, setFavs] = useRecoilState(favsState);\n  const onChangeRality = () => {\n    if (plate.InitialRarity === plate.MaxRarity) return;\n    setReleased(!released);\n  };\n\n  const getPlateColor = (a: string) => {\n    switch (a) {\n      case \"star\":\n        return \"#FFFF99\";\n      case \"love\":\n        return \"#FFCCFF\";\n      case \"life\":\n        return \"#99FFFF\";\n      default:\n        return \"white\";\n    }\n  };\n\n  const onOpenDetail = (plate: Plate) => {};\n  const onFavChange = (id: number) => {\n    let fav = favs.get(id);\n    if (fav === undefined) {\n      setFavs((f) => {\n        return f.set(id, false);\n      });\n    } else if (!fav && plate.InitialRarity !== plate.MaxRarity) {\n      setFavs((f) => {\n        return f.set(id, true);\n      });\n    } else {\n      setFavs((f) => {\n        f.delete(id);\n        return f;\n      });\n    }\n  };\n\n  return (\n    <Paper\n      style={{\n        margin: 2,\n        padding: 5,\n        background: getPlateColor(plate.Attribute),\n      }}\n    >\n      <div style={{ clear: \"left\" }}>\n        <h4 style={{ width: \"95%\", margin: 0, float: \"left\" }}>{plate.Name}</h4>\n        <span\n          style={{\n            float: \"left\",\n            color: favs.get(plate.Id) ? \"purple\" : \"black\",\n          }}\n          onClick={() => onFavChange(plate.Id)}\n        >\n          {favs.get(plate.Id) !== undefined ? \"★\" : \"☆\"}\n        </span>\n      </div>\n      <img\n        src={released ? plate.ReleasedImage : plate.InitialImage}\n        alt={plate.Name}\n        style={{ width: \"65%\", float: \"left\" }}\n        onClick={onChangeRality}\n      />\n      <div style={{ float: \"left\", width: \"35%\" }}>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            marginLeft: 5,\n          }}\n        >\n          <li>Total:{plate.MaxTotal}</li>\n          <li>Voice:{plate.MaxVoice}</li>\n          <li>Soul: {plate.MaxSoul}</li>\n          <li>Charm:{plate.MaxCharm}</li>\n        </ul>\n      </div>\n      <div style={{ clear: \"left\" }}>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>Center:{plate.CenterSkill}</li>\n          <li>Active:{plate.ActiveSkill}</li>\n          <li>Live :{plate.LiveSkill}</li>\n        </ul>\n        <div style={{ clear: \"left\" }}>\n          <button onClick={() => onOpenDetail(plate)} style={{ width: \"100%\" }}>\n            Detail\n          </button>\n        </div>\n      </div>\n    </Paper>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { pagedPlateState } from \"../atoms/plate\";\nimport { PlateCard } from \"../components/PlateCard\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      margin: 5,\n    },\n    item: {\n      minWidth: 360,\n    },\n  })\n);\n\ntype PlateListProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateList = (props: PlateListProps) => {\n  const classes = useStyles();\n  const plates = useRecoilValue(pagedPlateState);\n\n  return (\n    <Grid container className={classes.root} spacing={1}>\n      {plates.map((p) => (\n        <Grid item key={p.Id} className={classes.item}>\n          <PlateCard plate={p} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  plateFilterState,\n  liveSkillListState,\n  defaultRalities,\n  defaultTypes,\n  defaultEffectiveDivas,\n} from \"../atoms/plate\";\nimport { ToggleButton } from \"@material-ui/lab\";\nimport { Typography } from \"@material-ui/core\";\n\ntype PlateFilterProps = {\n  children?: React.ReactNode;\n};\n\nconst divaIcons = new Map([\n  [\n    \"フレイア・ヴィオン\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/dc7c858c-d70b-3ae8-8774-b0978ccc052e.png\",\n  ],\n  [\n    \"美雲・ギンヌメール\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/b658d01c-80d0-31d5-a4ea-8a2d51046d53.png\",\n  ],\n  [\n    \"カナメ・バッカニア\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/a9a410e5-8227-3b2b-afbe-0b5999af2653.png\",\n  ],\n  [\n    \"マキナ・中島\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/2feadf81-1b66-353f-b6eb-0a25bd634660.png\",\n  ],\n  [\n    \"レイナ・プラウラー\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/9f3690c0-c028-35b4-ae03-b346d4610853.png\",\n  ],\n  [\n    \"ランカ・リー\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/a16267e6-6b37-3f7d-9cde-d88bfd3969a8.png\",\n  ],\n  [\n    \"シェリル・ノーム\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/53f86292-f967-3a57-84cd-2f944420a58c.png\",\n  ],\n  [\n    \"ミレーヌ・ジーナス\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/5770e99d-e573-303f-952c-166a4aecc248.png\",\n  ],\n  [\n    \"熱気バサラ\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/04705704-7e76-3c66-b44e-044a018071d0.png\",\n  ],\n  [\n    \"リン・ミンメイ\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/e6e2e53c-b216-37f1-ae81-b13261ae6afe.png\",\n  ],\n]);\n\nconst typeIcons = new Map([\n  [\n    \"star\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/23ae18f6-1a63-33f8-bc97-bc1708d7d405.png\",\n  ],\n  [\n    \"love\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/1406e264-badf-3721-bcd0-be3375593d1d.png\",\n  ],\n  [\n    \"life\",\n    \"https://cdn-image.pf.dena.com/fa9c327e33426cd5e3dff097aa3feee754c90f9a/1/f6c1446e-9946-3f65-900d-0fd3236b0afb.png\",\n  ],\n]);\n\nexport const PlateFilter = (props: PlateFilterProps) => {\n  const [filter, setFilter] = useRecoilState(plateFilterState);\n  // const [effectiveDivaFilter, setEffectiveDivaFilter] = useRecoilState(\n  //   plateEffectiveDivaState\n  // );\n  const liveSkillList = useRecoilValue(liveSkillListState);\n\n  const generateRalityFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.rality.forEach((v, k) => {\n      results.push(\n        <ToggleButton\n          key={\"rality\" + k}\n          selected={v}\n          value={v}\n          onChange={() =>\n            setFilter((f) => {\n              return { ...f, rality: f.rality.set(k, !v) };\n            })\n          }\n          style={{\n            paddingLeft: 7,\n            paddingRight: 7,\n            paddingTop: 0,\n            paddingBottom: 0,\n            margin: 1,\n          }}\n        >\n          {k}\n        </ToggleButton>\n      );\n    });\n    return results;\n  };\n\n  const generateTypeFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.type.forEach((v, k) => {\n      results.push(\n        <ToggleButton\n          key={\"type\" + k}\n          value={v}\n          selected={v}\n          onChange={() =>\n            setFilter((f) => {\n              return { ...f, type: f.type.set(k, !v) };\n            })\n          }\n          style={{ padding: 0, margin: 1 }}\n        >\n          <img src={typeIcons.get(k)} width={30} alt={k} title={k} />\n        </ToggleButton>\n      );\n    });\n    return results;\n  };\n\n  const generateEffectiveDivaFilter = () => {\n    let results: JSX.Element[] = [];\n    filter.effectiveDiva.forEach((v, k) => {\n      results.push(\n        <ToggleButton\n          key={\"diva\" + (results.length + 1)}\n          value={v}\n          selected={v}\n          onChange={() =>\n            setFilter((f) => {\n              return { ...f, effectiveDiva: f.effectiveDiva.set(k, !v) };\n            })\n          }\n          style={{ padding: 0, marginLeft: 1 }}\n        >\n          <img src={divaIcons.get(k)} width={30} alt={k} title={k} />\n        </ToggleButton>\n      );\n    });\n    return results;\n  };\n\n  return (\n    <div\n      style={{\n        margin: 5,\n      }}\n    >\n      <div>\n        <Typography variant=\"subtitle2\">レアリティ</Typography>\n        <ToggleButton\n          key={\"ralityAll\"}\n          style={{\n            paddingLeft: 7,\n            paddingRight: 7,\n            paddingTop: 0,\n            paddingBottom: 0,\n            margin: 1,\n          }}\n          value={\"all\"}\n          onChange={() =>\n            setFilter((f) => {\n              return { ...f, rality: new Map(defaultRalities) };\n            })\n          }\n        >\n          ALL\n        </ToggleButton>\n        {generateRalityFilter()}\n      </div>\n      <div>\n        <Typography variant=\"subtitle2\">属性</Typography>\n        <ToggleButton\n          key={\"typeAll\"}\n          style={{\n            paddingLeft: 7,\n            paddingRight: 7,\n            paddingTop: 3,\n            paddingBottom: 3,\n            margin: 1,\n          }}\n          value={\"all\"}\n          onChange={() =>\n            setFilter((f) => {\n              return { ...f, type: new Map(defaultTypes) };\n            })\n          }\n        >\n          ALL\n        </ToggleButton>\n        {generateTypeFilter()}\n      </div>\n\n      <div>\n        <Typography variant=\"subtitle2\">ライブスキル</Typography>\n        <select\n          value={filter.liveSkill}\n          onChange={(e) =>\n            setFilter((f) => {\n              return { ...f, liveSkill: e.currentTarget.value };\n            })\n          }\n        >\n          <option value={\"\"}></option>\n          {liveSkillList.map((l, i) => (\n            <option key={\"skill\" + i} value={l}>\n              {l}\n            </option>\n          ))}\n        </select>\n        <div>\n          <Typography variant=\"subtitle2\">対応歌姫</Typography>\n          <ToggleButton\n            key={\"divaAll\"}\n            style={{\n              paddingLeft: 7,\n              paddingRight: 7,\n              paddingTop: 3,\n              paddingBottom: 3,\n              marginLeft: 1,\n            }}\n            value={\"all\"}\n            onChange={() =>\n              setFilter((f) => {\n                return { ...f, effectiveDiva: new Map(defaultEffectiveDivas) };\n              })\n            }\n          >\n            ALL\n          </ToggleButton>\n          {generateEffectiveDivaFilter()}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { platePagingState, filteredPlateState } from \"../atoms/plate\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      \"& > * + *\": {\n        marginTop: theme.spacing(2),\n      },\n      margin: 5,\n    },\n  })\n);\n\ntype PlatePaginationProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlatePagination = (props: PlatePaginationProps) => {\n  const classes = useStyles();\n  const filteredPlates = useRecoilValue(filteredPlateState);\n  const [paging, setPaging] = useRecoilState(platePagingState);\n\n  const count = filteredPlates.count;\n  const pages = count === 0 ? 1 : Math.ceil(count / paging.numberOf);\n  const current = paging.current > pages ? pages : paging.current;\n\n  if (current !== paging.current) {\n    setPaging((p) => {\n      return { ...p, current: current };\n    });\n  }\n\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPaging((p) => {\n      return { ...p, current: value };\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Pagination\n        count={pages}\n        size={\"small\"}\n        page={current}\n        variant=\"outlined\"\n        shape=\"rounded\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport { PlateList } from \"./containers/PlateList\";\nimport { PlateFilter } from \"./components/PlateFilter\";\nimport { PlatePagination } from \"./components/PlatePagination\";\nimport { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\nimport { favsState, plateFilterState, PlateFilterSetting } from \"./atoms/plate\";\nimport { Container, Divider } from \"@material-ui/core\";\n\nfunction PersistenceObserver() {\n  useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n    // TODO : どのatomが更新されたかわからないので、毎回全部保存してるのでどうにかしたい\n\n    var favs = snapshot.getLoadable(favsState).contents;\n    var favsJson = JSON.stringify(Array.from(favs as Map<number, boolean>));\n    if (localStorage.getItem(favsState.key) !== favsJson) {\n      localStorage.setItem(favsState.key, favsJson);\n    }\n\n    var filter = snapshot.getLoadable(plateFilterState)\n      .contents as PlateFilterSetting;\n\n    var rality = Array.from(filter.rality as Map<string, boolean>);\n    var ralityJson = JSON.stringify(rality);\n    if (localStorage.getItem(\"plateRality\") !== ralityJson) {\n      localStorage.setItem(\"plateRality\", ralityJson);\n    }\n\n    var type = Array.from(filter.type as Map<string, boolean>);\n    var typeJson = JSON.stringify(type);\n    if (localStorage.getItem(\"plateType\") !== typeJson) {\n      localStorage.setItem(\"plateType\", typeJson);\n    }\n\n    var effectiveDiva = Array.from(\n      filter.effectiveDiva as Map<string, boolean>\n    );\n    var effectiveDivaJson = JSON.stringify(effectiveDiva);\n    if (localStorage.getItem(\"plateEffectiveDiva\") !== effectiveDivaJson) {\n      localStorage.setItem(\"plateEffectiveDiva\", effectiveDivaJson);\n    }\n\n    var liveSkill = filter.liveSkill;\n    if (localStorage.getItem(\"liveSkill\") !== liveSkill) {\n      localStorage.setItem(\"liveSkill\", liveSkill);\n    }\n  });\n  return null;\n}\n\nfunction App() {\n  document.title = \"歌マクロスDB\";\n  return (\n    <RecoilRoot>\n      <PersistenceObserver />\n      <Container\n        maxWidth=\"xl\"\n        style={{ paddingLeft: 0, paddingRight: 0, marginBottom: 5 }}\n      >\n        <PlateFilter />\n        <Divider />\n        <PlatePagination />\n        <Divider />\n        <PlateList />\n        <Divider />\n        <PlatePagination />\n      </Container>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { red } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport theme from \"./theme\";\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}