{"version":3,"sources":["atoms/plate.ts","components/PlateCard.tsx","containers/PlateList.tsx","components/PlateFilter.tsx","components/PlatePagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialFavs","JSON","parse","localStorage","getItem","favsState","atom","key","default","initialPlates","plateList","plateState","plateFilterState","useRality","rality","use","useAttribute","type","hasExpected","name","has","filteredPlateState","selector","get","filter","item","find","f","InitialRarity","Attribute","platePagingState","current","pages","numberOf","pagedPlateState","filteredList","paging","count","length","Math","ceil","slice","PlateCard","props","plate","useState","released","setReleased","useRecoilState","favs","setFavs","style","margin","padding","clear","boxShadow","transition","background","a","getPlateColor","width","float","Name","onClick","id","index","indexOf","sort","p","onFavChange","Id","src","ReleasedImage","InitialImage","alt","MaxRarity","listStyle","paddingLeft","marginLeft","textAlign","MaxTotal","MaxVoice","MaxSoul","MaxCharm","CenterSkill","ActiveSkill","LiveSkill","PlateList","plates","useRecoilValue","marginTop","map","PlateFilter","setFilter","r","i","checked","onChange","newValue","onChangeUseRality","t","onChangeUseType","PlatePagination","filteredPlates","setPaging","jumpToPage","jumpPages","last","getJumpPages","b","e","disabled","value","parseInt","currentTarget","isNaN","min","max","PersistenceObserver","useRecoilTransactionObserver_UNSTABLE","snapshot","getLoadable","contents","setItem","stringify","App","document","title","position","top","height","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ymh4HAGMA,EAAwBC,KAAKC,MAAL,UAC5BC,aAAaC,QAAQ,oBADO,QACS,MAE1BC,EAAYC,eAAK,CAC5BC,IAAK,YACLC,QAASR,IA4CLS,EAAyBC,EAElBC,EAAaL,eAAK,CAC7BC,IAAK,QACLC,QAASC,IA+CEG,EAAmBN,eAAK,CACnCC,IAAK,SACLC,QAzBsC,CACtCK,UAAW,CACT,CAAEC,OAAQ,EAAGC,KAAK,GAClB,CAAED,OAAQ,EAAGC,KAAK,GAClB,CAAED,OAAQ,EAAGC,KAAK,GAClB,CAAED,OAAQ,EAAGC,KAAK,GAClB,CAAED,OAAQ,EAAGC,KAAK,GAClB,CAAED,OAAQ,EAAGC,KAAK,IAEpBC,aAAc,CACZ,CAAEC,KAAM,OAAQF,KAAK,GACrB,CAAEE,KAAM,OAAQF,KAAK,GACrB,CAAEE,KAAM,OAAQF,KAAK,IAEvBG,YAAa,CACX,CAAEC,KAAM,OAAQC,IAAK,MACrB,CAAED,KAAM,QAASC,IAAK,MACtB,CAAED,KAAM,OAAQC,IAAK,MACrB,CAAED,KAAM,YAAaC,IAAK,MAC1B,CAAED,KAAM,SAAUC,IAAK,UASdC,EAAqBC,mBAAS,CACzCf,IAAK,qBACLgB,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAASD,EAAIX,GAanB,OAZaW,EAAIZ,GAEKa,QACpB,SAACC,GAAD,uBACED,EAAOX,UAAUa,MAAK,SAACC,GAAD,OAAOA,EAAEb,SAAWW,EAAKG,wBADjD,aACE,EAA+Db,OAEpCS,QAC7B,SAACC,GAAD,uBAAUD,EAAOR,aAAaU,MAAK,SAACC,GAAD,OAAOA,EAAEV,OAASQ,EAAKI,oBAA1D,aAAU,EAA4Dd,UAqB/De,EAAmBxB,eAAK,CACnCC,IAAK,SACLC,QARyB,CACzBuB,QAAS,EACTC,MAAO,EACPC,SAAU,MAQCC,EAAkBZ,mBAAS,CACtCf,IAAK,kBACLgB,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAY,EAAeZ,EAAIF,GACnBe,EAASb,EAAIO,GACbO,EAAQF,EAAaG,OAC3B,GAAID,GAASD,EAAOH,SAAU,OAAOE,EACrC,IAAMH,EAAQO,KAAKC,KAAKH,EAAQD,EAAOH,UACjCF,EAAUK,EAAOL,QAAUC,EAAQI,EAAOJ,MAAQI,EAAOL,QAC/D,OAAOI,EAAaM,MAClBL,EAAOH,UAAYF,EAAU,GAC7BK,EAAOH,SAAWF,M,cCnJXW,EAAY,SAACC,GACxB,IAAIC,EAAQD,EAAMC,MADgC,EAElBC,oBAAS,GAFS,mBAE3CC,EAF2C,KAEjCC,EAFiC,OAG1BC,yBAAe3C,GAHW,mBAG3C4C,EAH2C,KAGrCC,EAHqC,KAoClD,OACE,yBACEC,MAAO,CACLC,OAAQ,EACRC,QAAS,EACTC,MAAO,OACPC,UAAW,8BACXC,WAAY,OACZC,WAnCgB,SAACC,GACrB,OAAQA,GACN,IAAK,OACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,QACE,MAAO,SA0BKC,CAAcf,EAAMf,aAGlC,yBAAKsB,MAAO,CAAEG,MAAO,SACnB,wBAAIH,MAAO,CAAES,MAAO,MAAOR,OAAQ,EAAGS,MAAO,SAAWjB,EAAMkB,MAC9D,0BAAMX,MAAO,CAAEU,MAAO,QAAUE,QAAS,kBA1B3B,SAACC,GACnB,IAAIC,EAAQhB,EAAKiB,QAAQF,GAEvBd,GADa,IAAXe,EACM,SAACtC,GACP,MAAO,sBAAIA,GAAJ,CAAOqC,IAAIG,QAGZ,SAACxC,GACP,OAAOA,EAAEH,QAAO,SAAC4C,GAAD,OAAOA,IAAMJ,KAAIG,SAkBcE,CAAYzB,EAAM0B,OAClC,IAA5BrB,EAAKiB,QAAQtB,EAAM0B,IAAa,SAAM,WAG3C,yBACEC,IAAKzB,EAAWF,EAAM4B,cAAgB5B,EAAM6B,aAC5CC,IAAK9B,EAAMkB,KACXX,MAAO,CAAES,MAAO,MAAOC,MAAO,QAC9BE,QArDiB,WACjBnB,EAAMhB,gBAAkBgB,EAAM+B,WAClC5B,GAAaD,MAqDX,yBAAKK,MAAO,CAAEU,MAAO,OAAQD,MAAO,QAClC,wBACET,MAAO,CACLyB,UAAW,OACXf,MAAO,OACPgB,YAAa,EACbC,WAAY,IAGd,sCACA,sCACA,qCACA,uCAEF,wBACE3B,MAAO,CACLyB,UAAW,OACXf,MAAO,OACPgB,YAAa,EACbE,UAAW,UAGb,4BAAKnC,EAAMoC,UACX,4BAAKpC,EAAMqC,UACX,4BAAKrC,EAAMsC,SACX,4BAAKtC,EAAMuC,YAGf,yBAAKhC,MAAO,CAAEG,MAAO,SACnB,wBAAIH,MAAO,CAAEyB,UAAW,OAAQf,MAAO,OAAQgB,YAAa,IAC1D,uCACA,uCACA,sCAEF,wBAAI1B,MAAO,CAAEyB,UAAW,OAAQf,MAAO,OAAQgB,YAAa,IAC1D,4BAAKjC,EAAMwC,aACX,4BAAKxC,EAAMyC,aACX,4BAAKzC,EAAM0C,YAEb,yBAAKnC,MAAO,CAAEG,MAAO,SACnB,4BAAQS,QAAS,aAA2BZ,MAAO,CAAES,MAAO,SAA5D,cCnGG2B,EAAY,SAAC5C,GACxB,IAAM6C,EAASC,yBAAevD,GAE9B,OACE,wBAAIiB,MAAO,CAAEuC,UAAW,IAAKrC,QAAS,IACnCmC,EAAOG,KAAI,SAACvB,GAAD,OACV,wBAAI7D,IAAK6D,EAAEE,GAAInB,MAAO,CAAEyB,UAAW,OAAQf,MAAO,OAAQT,OAAQ,IAChE,kBAAC,EAAD,CAAWR,MAAOwB,U,OCRfwB,EAAc,SAACjD,GAA6B,IAAD,EAC1BK,yBAAepC,GADW,mBAC/CY,EAD+C,KACvCqE,EADuC,KA+BtD,OACE,yBACE1C,MAAO,CACLC,OAAQ,IAGV,+DAEG5B,EAAOX,UAAU8E,KAAI,SAACG,EAAGC,GAAJ,OACpB,2BAAOxF,IAAK,YAAcwF,GACxB,2BACE9E,KAAK,WACL+E,QAASF,EAAE/E,IACXkF,SAAU,kBAzCI,SAACF,GACzBF,GAAU,SAAClE,GACT,IAAIuE,GAAYvE,EAAEd,UAAUkF,GAAGhF,IAC/B,OAAO,eACFY,EADL,CAEEd,UAAU,GAAD,mBACJc,EAAEd,UAAU4B,MAAM,EAAGsD,IADjB,gBAEFpE,EAAEd,UAAUkF,GAFV,CAEchF,IAAKmF,KAFnB,YAGJvE,EAAEd,UAAU4B,MAAMsD,EAAI,UAiCLI,CAAkBJ,MAEnCD,EAAEhF,YAIT,6CAEGU,EAAOR,aAAa2E,KAAI,SAACS,EAAGL,GAAJ,OACvB,2BAAOxF,IAAK,UAAYwF,GACtB,2BACE9E,KAAK,WACL+E,QAASI,EAAErF,IACXkF,SAAU,kBAxCE,SAACF,GACvBF,GAAU,SAAClE,GACT,IAAIuE,GAAYvE,EAAEX,aAAa+E,GAAGhF,IAClC,OAAO,eACFY,EADL,CAEEX,aAAa,GAAD,mBACPW,EAAEX,aAAayB,MAAM,EAAGsD,IADjB,gBAELpE,EAAEX,aAAa+E,GAFV,CAEchF,IAAKmF,KAFnB,YAGPvE,EAAEX,aAAayB,MAAMsD,EAAI,UAgCRM,CAAgBN,MAEjCK,EAAEnF,YC3DFqF,EAAkB,SAAC3D,GAC9B,IAAM4D,EAAiBd,yBAAepE,GADwB,EAElC2B,yBAAelB,GAFmB,mBAEvDM,EAFuD,KAE/CoE,EAF+C,KAIxDnE,EAAQkE,EAAejE,OACvBN,EAAkB,IAAVK,EAAc,EAAIE,KAAKC,KAAKH,EAAQD,EAAOH,UACnDF,EAAUK,EAAOL,QAAUC,EAAQA,EAAQI,EAAOL,QAEpDC,IAAUI,EAAOJ,OAASD,IAAYK,EAAOL,SAC/CyE,GAAU,SAACpC,GACT,OAAO,eAAKA,EAAZ,CAAerC,QAASA,EAASC,MAAOA,OAI5C,IAOMyE,EAAa,SAACV,GAClBS,GAAU,SAACpC,GACT,OAAO,eAAKA,EAAZ,CAAerC,QAASgE,QAyBtBW,EArBe,WACnB,OAAQtE,EAAOJ,OACb,KAAK,EACH,MAAO,GACT,KAAK,EACH,MAAO,CAAC,GACV,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,EAAG,GAChB,KAAK,EACH,MAAO,CAAC,EAAG,EAAG,EAAG,GACnB,KAAK,EACH,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GACtB,KAAK,EACH,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,QACE,IAAI2E,EAAO,EAAE,GAAI,EAAG,GAAGhB,KAAI,SAACI,GAAD,OAAO3D,EAAOJ,MAAQ+D,KACjD,MAAM,CAAE,EAAG,EAAG,GAAd,mBAAoBY,KAGRC,GAElB,OACE,yBACEzD,MAAO,CACLC,OAAQ,IAFZ,gBAMGsD,EAAUjE,MAAM,EAAG,GAAGkD,KAAI,SAACkB,GAAD,OACzB,4BACEtG,IAAK,OAASsG,EACd9C,QAAS,SAAC+C,GAAD,OAAOL,EAAWI,IAC3BE,SAAU3E,EAAOL,UAAY8E,GAE5BA,MAZP,MAgBE,4BACE9C,QAAS,kBAAM0C,EAAWrE,EAAOL,QAAU,IAC3CgF,SAA6B,IAAnB3E,EAAOL,SAFnB,UAMA,2BACEd,KAAK,SACL+F,MAAO5E,EAAOL,QACdkE,SA9DsB,SAACa,GAC3BN,GAAU,SAACpC,GACT,IAAM4C,EAAQC,SAASH,EAAEI,cAAcF,OACvC,OAAO,eAAK5C,EAAZ,CAAerC,QAASoF,MAAMH,GAAS,EAAIA,QA4DzCI,IAAK,EACLC,IAAKrF,EACLmB,MAAO,CACLS,MAAO,SAGX,4BACEG,QAAS,kBAAM0C,EAAWrE,EAAOL,QAAU,IAC3CgF,SAAU3E,EAAOL,UAAYK,EAAOJ,OAFtC,UAhCF,MAuCG0E,EAAUjE,MAAM,EAAG,GAAGkD,KAAI,SAACkB,GAAD,OACzB,4BACEtG,IAAK,OAASsG,EACd9C,QAAS,SAAC+C,GAAD,OAAOL,EAAWI,IAC3BE,SAAU3E,EAAOL,UAAY8E,GAE5BA,QChGX,SAASS,IAKP,OAJAC,iDAAsC,YAAmB,IACnDtE,EADkD,EAAfuE,SACnBC,YAAYpH,GAAWqH,SAC3CvH,aAAawH,QAAQ,YAAa1H,KAAK2H,UAAU3E,OAE5C,KA0CM4E,MAvCf,WAEE,OADAC,SAASC,MAAQ,mCAEf,kBAAC,aAAD,KACE,kBAACT,EAAD,MACA,wBACEnE,MAAO,CACL6E,SAAU,QACVC,IAAK,EACLC,OAAQ,GACR9E,OAAQ,EACRyB,YAAa,EACbjB,MAAO,OACPH,WAAY,UACZ0E,MAAO,UATX,oCAcA,yBACEhF,MAAO,CACL6E,SAAU,QACVC,IAAK,GACLC,OAAQ,GACRtE,MAAO,OACPP,QAAS,EACTE,UAAW,8BACXC,WAAY,OACZC,WAAY,UAGd,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCtCA2E,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDiBnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,WACA7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,WAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQjJ,IAAI,gBAEnB,MAApBkJ,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYxG,QAAQ,cAG5C2E,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.02a6a138.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport plateList from \"../resources/plateList.json\";\n\nconst initialFavs: number[] = JSON.parse(\n  localStorage.getItem(\"favsPlate\") ?? \"[]\"\n);\nexport const favsState = atom({\n  key: \"favsPlate\",\n  default: initialFavs,\n});\n\nexport interface Plate {\n  Id: number;\n  Url: string;\n  Name: string;\n  InitialRarity: number;\n  MaxRarity: number;\n  Attribute: string;\n  InitialImage: string;\n  ReleasedImage: string;\n  Episod: string;\n  CenterSkill: string;\n  CenterSkillCondition: string;\n  ActiveSkill: string;\n  ActiveSkillCondition: string;\n  LiveSkill: string;\n  LiveSkillCondition: string;\n  EffectiveDiva: string[];\n  InitialTotal: number;\n  MaxTotal: number;\n  InitialSoul: number;\n  MaxSoul: number;\n  InitialVoice: number;\n  MaxVoice: number;\n  InitialCharm: number;\n  MaxCharm: number;\n  InitialLife: number;\n  MaxLife: number;\n  InitialSuport: number;\n  MaxSuport: number;\n  InitialForldWave: number;\n  MaxForldWave: number;\n  MaxLuck: number;\n  ExpectedLife: number;\n  ExpectedScore: number;\n  ExpectedItem: number;\n  ExpectedForldWave: number;\n  ExpectedAttack: number;\n  Discription: string;\n  Error: [];\n}\n\nconst initialPlates: Plate[] = plateList;\n\nexport const plateState = atom({\n  key: \"plate\",\n  default: initialPlates,\n});\n\nexport type RalityFilter = {\n  rality: number;\n  use: boolean;\n};\n\nexport type AttributeFilter = {\n  type: string;\n  use: boolean;\n};\n\nexport type ExpectedValueFilter = {\n  name: string;\n  has: boolean | null; // has expected value? yes:true / no:false / both:null\n};\n\nexport interface PlateFilter {\n  useRality: RalityFilter[];\n  useAttribute: AttributeFilter[];\n  hasExpected: ExpectedValueFilter[];\n}\n\nconst initialPlateFilter: PlateFilter = {\n  useRality: [\n    { rality: 6, use: true },\n    { rality: 5, use: true },\n    { rality: 4, use: true },\n    { rality: 3, use: true },\n    { rality: 2, use: true },\n    { rality: 1, use: true },\n  ],\n  useAttribute: [\n    { type: \"star\", use: true },\n    { type: \"love\", use: true },\n    { type: \"life\", use: true },\n  ],\n  hasExpected: [\n    { name: \"Life\", has: null },\n    { name: \"Score\", has: null },\n    { name: \"Item\", has: null },\n    { name: \"ForldWave\", has: null },\n    { name: \"Attack\", has: null },\n  ],\n};\n\nexport const plateFilterState = atom({\n  key: \"filter\",\n  default: initialPlateFilter,\n});\n\nexport const filteredPlateState = selector({\n  key: \"filteredPlateState\",\n  get: ({ get }) => {\n    const filter = get(plateFilterState);\n    const list = get(plateState);\n    //const favs = get(favsState);\n    var usedRality = list.filter(\n      (item) =>\n        filter.useRality.find((f) => f.rality === item.InitialRarity)?.use\n    );\n    var usedAttribute = usedRality.filter(\n      (item) => filter.useAttribute.find((f) => f.type === item.Attribute)?.use\n    );\n    // TODO : お気に入りを使ってフィルタリングするかどうかを指定するフィルタリング項目を画面とfavsStateに追加する（でもlocalstorageに保存するのは配列のみにしたい）\n    //var usedFavs = usedType.filter((item) => favs.find((f) => f === item.Id));\n    //return usedFavs;\n    return usedAttribute;\n  },\n});\n\nexport interface PlatePaging {\n  current: number;\n  pages: number;\n  numberOf: number;\n}\n\nconst initialPlatePaging = {\n  current: 1,\n  pages: 1,\n  numberOf: 10,\n};\n\nexport const platePagingState = atom({\n  key: \"paging\",\n  default: initialPlatePaging,\n});\n\nexport const pagedPlateState = selector({\n  key: \"pagedPlateState\",\n  get: ({ get }) => {\n    const filteredList = get(filteredPlateState);\n    const paging = get(platePagingState);\n    const count = filteredList.length;\n    if (count <= paging.numberOf) return filteredList;\n    const pages = Math.ceil(count / paging.numberOf);\n    const current = paging.current > pages ? paging.pages : paging.current;\n    return filteredList.slice(\n      paging.numberOf * (current - 1),\n      paging.numberOf * current\n    );\n  },\n});\n","import React, { useState } from \"react\";\nimport { Plate, favsState } from \"../atoms/plate\";\nimport { useRecoilState } from \"recoil\";\n\nexport type PlateCardProps = {\n  plate: Plate;\n  children?: React.ReactNode;\n};\n\nexport const PlateCard = (props: PlateCardProps) => {\n  var plate = props.plate;\n  const [released, setReleased] = useState(false);\n  const [favs, setFavs] = useRecoilState(favsState);\n  const onChangeRality = () => {\n    if (plate.InitialRarity === plate.MaxRarity) return;\n    setReleased(!released);\n  };\n\n  const getPlateColor = (a: string) => {\n    switch (a) {\n      case \"star\":\n        return \"#FFFF99\";\n      case \"love\":\n        return \"#FFCCFF\";\n      case \"life\":\n        return \"#99FFFF\";\n      default:\n        return \"white\";\n    }\n  };\n\n  const onOpenDetail = (plate: Plate) => {};\n  const onFavChange = (id: number) => {\n    var index = favs.indexOf(id);\n    if (index === -1) {\n      setFavs((f) => {\n        return [...f, id].sort();\n      });\n    } else {\n      setFavs((f) => {\n        return f.filter((p) => p !== id).sort();\n      });\n    }\n  };\n\n  return (\n    <div\n      style={{\n        margin: 2,\n        padding: 5,\n        clear: \"left\",\n        boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\n        transition: \"0.3s\",\n        background: getPlateColor(plate.Attribute),\n      }}\n    >\n      <div style={{ clear: \"left\" }}>\n        <h4 style={{ width: \"95%\", margin: 0, float: \"left\" }}>{plate.Name}</h4>\n        <span style={{ float: \"left\" }} onClick={() => onFavChange(plate.Id)}>\n          {favs.indexOf(plate.Id) !== -1 ? \"★\" : \"☆\"}\n        </span>\n      </div>\n      <img\n        src={released ? plate.ReleasedImage : plate.InitialImage}\n        alt={plate.Name}\n        style={{ width: \"60%\", float: \"left\" }}\n        onClick={onChangeRality}\n      />\n      <div style={{ float: \"left\", width: \"40%\" }}>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            marginLeft: 5,\n          }}\n        >\n          <li>Total:</li>\n          <li>Voice:</li>\n          <li>Soul:</li>\n          <li>Charm:</li>\n        </ul>\n        <ul\n          style={{\n            listStyle: \"none\",\n            float: \"left\",\n            paddingLeft: 0,\n            textAlign: \"right\",\n          }}\n        >\n          <li>{plate.MaxTotal}</li>\n          <li>{plate.MaxVoice}</li>\n          <li>{plate.MaxSoul}</li>\n          <li>{plate.MaxCharm}</li>\n        </ul>\n      </div>\n      <div style={{ clear: \"left\" }}>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>Center:</li>\n          <li>Active:</li>\n          <li>Live:</li>\n        </ul>\n        <ul style={{ listStyle: \"none\", float: \"left\", paddingLeft: 0 }}>\n          <li>{plate.CenterSkill}</li>\n          <li>{plate.ActiveSkill}</li>\n          <li>{plate.LiveSkill}</li>\n        </ul>\n        <div style={{ clear: \"left\" }}>\n          <button onClick={() => onOpenDetail(plate)} style={{ width: \"100%\" }}>\n            Detail\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { pagedPlateState } from \"../atoms/plate\";\nimport { PlateCard } from \"../components/PlateCard\";\n\ntype PlateListProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateList = (props: PlateListProps) => {\n  const plates = useRecoilValue(pagedPlateState);\n\n  return (\n    <ul style={{ marginTop: 115, padding: 0 }}>\n      {plates.map((p) => (\n        <li key={p.Id} style={{ listStyle: \"none\", float: \"left\", margin: 2 }}>\n          <PlateCard plate={p} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { plateFilterState } from \"../atoms/plate\";\n\ntype PlateFilterProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlateFilter = (props: PlateFilterProps) => {\n  const [filter, setFilter] = useRecoilState(plateFilterState);\n\n  const onChangeUseRality = (i: number) => {\n    setFilter((f) => {\n      var newValue = !f.useRality[i].use;\n      return {\n        ...f,\n        useRality: [\n          ...f.useRality.slice(0, i),\n          { ...f.useRality[i], use: newValue },\n          ...f.useRality.slice(i + 1),\n        ],\n      };\n    });\n  };\n\n  const onChangeUseType = (i: number) => {\n    setFilter((f) => {\n      var newValue = !f.useAttribute[i].use;\n      return {\n        ...f,\n        useAttribute: [\n          ...f.useAttribute.slice(0, i),\n          { ...f.useAttribute[i], use: newValue },\n          ...f.useAttribute.slice(i + 1),\n        ],\n      };\n    });\n  };\n\n  return (\n    <div\n      style={{\n        margin: 2,\n      }}\n    >\n      <div>\n        レアリティ:\n        {filter.useRality.map((r, i) => (\n          <label key={\"useRality\" + i}>\n            <input\n              type=\"checkbox\"\n              checked={r.use}\n              onChange={() => onChangeUseRality(i)}\n            />\n            {r.rality}\n          </label>\n        ))}\n      </div>\n      <div>\n        属性:\n        {filter.useAttribute.map((t, i) => (\n          <label key={\"useType\" + i}>\n            <input\n              type=\"checkbox\"\n              checked={t.use}\n              onChange={() => onChangeUseType(i)}\n            />\n            {t.type}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { platePagingState, filteredPlateState } from \"../atoms/plate\";\n\ntype PlatePaginationProps = {\n  children?: React.ReactNode;\n};\n\nexport const PlatePagination = (props: PlatePaginationProps) => {\n  const filteredPlates = useRecoilValue(filteredPlateState);\n  const [paging, setPaging] = useRecoilState(platePagingState);\n\n  const count = filteredPlates.length;\n  const pages = count === 0 ? 1 : Math.ceil(count / paging.numberOf);\n  const current = paging.current > pages ? pages : paging.current;\n\n  if (pages !== paging.pages || current !== paging.current) {\n    setPaging((p) => {\n      return { ...p, current: current, pages: pages };\n    });\n  }\n\n  const onChangeCurrentPage = (e: React.FormEvent<HTMLInputElement>) => {\n    setPaging((p) => {\n      const value = parseInt(e.currentTarget.value);\n      return { ...p, current: isNaN(value) ? 1 : value };\n    });\n  };\n\n  const jumpToPage = (i: number) => {\n    setPaging((p) => {\n      return { ...p, current: i };\n    });\n  };\n\n  const getJumpPages = () => {\n    switch (paging.pages) {\n      case 0:\n        return [];\n      case 1:\n        return [1];\n      case 2:\n        return [1, 2];\n      case 3:\n        return [1, 2, 3];\n      case 4:\n        return [1, 2, 3, 4];\n      case 5:\n        return [1, 2, 3, 4, 5];\n      case 6:\n        return [1, 2, 3, 4, 5, 6];\n      default:\n        var last = [-2, -1, 0].map((i) => paging.pages + i);\n        return [1, 2, 3, ...last];\n    }\n  };\n  const jumpPages = getJumpPages();\n\n  return (\n    <div\n      style={{\n        margin: 2,\n      }}\n    >\n      表示:\n      {jumpPages.slice(0, 3).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n      ...\n      <button\n        onClick={() => jumpToPage(paging.current - 1)}\n        disabled={paging.current === 1}\n      >\n        ◀\n      </button>\n      <input\n        type=\"number\"\n        value={paging.current}\n        onChange={onChangeCurrentPage}\n        min={1}\n        max={pages}\n        style={{\n          width: \"2em\",\n        }}\n      />\n      <button\n        onClick={() => jumpToPage(paging.current + 1)}\n        disabled={paging.current === paging.pages}\n      >\n        ▶\n      </button>\n      ...\n      {jumpPages.slice(3, 6).map((b) => (\n        <button\n          key={\"jump\" + b}\n          onClick={(e) => jumpToPage(b)}\n          disabled={paging.current === b}\n        >\n          {b}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport { PlateList } from \"./containers/PlateList\";\nimport { PlateFilter } from \"./components/PlateFilter\";\nimport { PlatePagination } from \"./components/PlatePagination\";\nimport { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\nimport { favsState } from \"./atoms/plate\";\n\nfunction PersistenceObserver() {\n  useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n    var favs = snapshot.getLoadable(favsState).contents;\n    localStorage.setItem(\"favsPlate\", JSON.stringify(favs));\n  });\n  return null;\n}\n\nfunction App() {\n  document.title = \"歌マクロスDB\";\n  return (\n    <RecoilRoot>\n      <PersistenceObserver />\n      <h3\n        style={{\n          position: \"fixed\",\n          top: 0,\n          height: 26,\n          margin: 0,\n          paddingLeft: 5,\n          width: \"100%\",\n          background: \"#3399FF\",\n          color: \"white\",\n        }}\n      >\n        歌マクロスDB\n      </h3>\n      <div\n        style={{\n          position: \"fixed\",\n          top: 26,\n          height: 78,\n          width: \"100%\",\n          padding: 5,\n          boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\n          transition: \"0.3s\",\n          background: \"white\",\n        }}\n      >\n        <PlateFilter />\n        <PlatePagination />\n      </div>\n      <PlateList />\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}